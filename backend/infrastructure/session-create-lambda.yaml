AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Chef Session Create Lambda Function'

Resources:
  SessionCreateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: 'arn:aws:dynamodb:*:*:table/ai-chef-sessions'

  SessionCreateLambda:
    Type: AWS::Lambda::Function
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      FunctionName: 'ai-chef-session-create'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt SessionCreateLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          SESSIONS_TABLE_NAME: 'ai-chef-sessions'
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          from datetime import datetime, timedelta
          import os

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['SESSIONS_TABLE_NAME'])

          def lambda_handler(event, context):
              print(f'세션 생성 요청: {json.dumps(event)}')
              
              if event.get('httpMethod') == 'OPTIONS':
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'POST, OPTIONS'
                      },
                      'body': ''
                  }
              
              try:
                  session_id = f"sess_{str(uuid.uuid4())}"
                  now = datetime.utcnow()
                  expires_at = now + timedelta(hours=2)
                  
                  session_record = {
                      'sessionId': session_id,
                      'status': 'idle',
                      'createdAt': now.isoformat() + 'Z',
                      'expiresAt': expires_at.isoformat() + 'Z',
                      'lastActivity': now.isoformat() + 'Z',
                      'ttl': int(expires_at.timestamp()),
                      'retryCount': 0,
                      'maxRetries': 3
                  }
                  
                  table.put_item(Item=session_record)
                  
                  print(f'세션 생성 완료: {session_id}')
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'sessionId': session_record['sessionId'],
                          'createdAt': session_record['createdAt'],
                          'expiresAt': session_record['expiresAt']
                      })
                  }
                  
              except Exception as error:
                  print(f'세션 생성 실패: {str(error)}')
                  
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'error': '세션 생성 중 오류가 발생했습니다'
                      })
                  }

  SessionCreateLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SessionCreateLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:68k4rbx0g4/*/*'
