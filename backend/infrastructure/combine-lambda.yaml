AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Chef Combine Lambda Function - Python Version'

Resources:
  # Lambda Execution Role
  CombineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ai-chef-sessions'

  # Combine Lambda Function
  CombineLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'ai-chef-combine'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CombineLambdaRole.Arn
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          SESSIONS_TABLE_NAME: 'ai-chef-sessions'
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime

          dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
          sessions_table = dynamodb.Table('ai-chef-sessions')

          def lambda_handler(event, context):
              try:
                  session_id = event.get('sessionId')
                  recipe_result = event.get('recipeResult')
                  pricing_result = event.get('pricingResult')
                  profile = event.get('profile')
                  
                  if not session_id or not recipe_result or not pricing_result:
                      raise ValueError('sessionId, recipeResult, and pricingResult required')
                  
                  # 레시피와 가격 데이터 결합
                  total_cost = pricing_result.get('recommendations', {}).get('totalEstimatedCost', 0)
                  
                  result = {
                      'success': True,
                      'data': {
                          'sessionId': session_id,
                          'recipe': {
                              'name': recipe_result.get('name', recipe_result.get('recipeName', '')),
                              'ingredients': recipe_result.get('ingredients', []),
                              'instructions': recipe_result.get('instructions', []),
                              'cookingTime': recipe_result.get('cookingTime', ''),
                              'difficulty': recipe_result.get('difficulty', 'medium'),
                              'servings': recipe_result.get('servings', 2)
                          },
                          'nutrition': {
                              'total': recipe_result.get('nutrition', {}),
                              'targetCompliance': recipe_result.get('targetCompliance', {})
                          },
                          'pricing': pricing_result,
                          'totalEstimatedCost': total_cost,
                          'generatedAt': datetime.now().isoformat(),
                          'profile': profile,
                          'summary': {
                              'recipeAvailable': bool(recipe_result.get('name') or recipe_result.get('recipeName')),
                              'pricingAvailable': pricing_result.get('summary', {}).get('foundIngredients', 0) > 0,
                              'nutritionAvailable': bool(recipe_result.get('nutrition')),
                              'successRate': pricing_result.get('summary', {}).get('successRate', 0)
                          }
                      },
                      'metadata': {
                          'source': 'CombineLambda',
                          'timestamp': datetime.now().isoformat(),
                          'version': '2.0'
                      }
                  }
                  
                  return {
                      'statusCode': 200,
                      'headers': {'Content-Type': 'application/json; charset=utf-8'},
                      'body': result
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': {'success': False, 'error': str(e)}
                  }

Outputs:
  CombineLambdaArn:
    Description: 'Combine Lambda Function ARN'
    Value: !GetAtt CombineLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CombineLambdaArn'
