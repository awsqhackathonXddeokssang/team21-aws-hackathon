AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Chef Recipe Lambda with Claude Opus 4.1'

Resources:
  # Lambda Execution Role
  RecipeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 'arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-opus-4-1-20250805-v1:0'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ai-chef-sessions'

  # Recipe Lambda Function
  RecipeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'ai-chef-recipe'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt RecipeLambdaRole.Arn
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: !Sub 'ai-chef-lambda-code-${AWS::AccountId}'
        S3Key: 'recipe/lambda-package.zip'
Outputs:
  RecipeLambdaArn:
    Description: 'Recipe Lambda Function ARN'
    Value: !GetAtt RecipeLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RecipeLambdaArn'
      
  RecipeLambdaName:
    Description: 'Recipe Lambda Function Name'
    Value: !Ref RecipeLambda
    Export:
      Name: !Sub '${AWS::StackName}-RecipeLambdaName'
