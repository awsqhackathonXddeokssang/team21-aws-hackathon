AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Chef Result Lambda - Simple'

Resources:
  # Result Lambda Execution Role
  ResultLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: 
                  - 'arn:aws:dynamodb:*:*:table/ai-chef-sessions'
                  - 'arn:aws:dynamodb:*:*:table/ai-chef-results'

  # Result Lambda Function
  ResultLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'ai-chef-result'
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ResultLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
          sessions_table = dynamodb.Table('ai-chef-sessions')
          results_table = dynamodb.Table('ai-chef-results')

          def lambda_handler(event, context):
              try:
                  session_id = event['pathParameters']['id']
                  logger.info(f"Getting result for session: {session_id}")
                  
                  # 세션 상태 확인
                  response = sessions_table.get_item(Key={'sessionId': session_id})
                  session = response.get('Item')
                  
                  if not session:
                      return {
                          'statusCode': 404,
                          'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                          'body': json.dumps({'success': False, 'error': 'SESSION_NOT_FOUND'})
                      }
                  
                  status = session.get('status')
                  
                  if status == 'completed':
                      # 완료된 경우 결과 반환
                      result_response = results_table.get_item(Key={'sessionId': session_id})
                      result = result_response.get('Item', {}).get('result')
                      
                      return {
                          'statusCode': 200,
                          'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                          'body': json.dumps({
                              'success': True,
                              'status': 'completed',
                              'result': result
                          })
                      }
                  elif status == 'processing':
                      # 처리 중인 경우 진행 상태 반환
                      return {
                          'statusCode': 200,
                          'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                          'body': json.dumps({
                              'success': True,
                              'status': 'processing',
                              'progress': session.get('progress', 0),
                              'phase': session.get('phase', 'unknown')
                          })
                      }
                  else:
                      return {
                          'statusCode': 400,
                          'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                          'body': json.dumps({'success': False, 'error': 'INVALID_STATUS'})
                      }
                      
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                      'body': json.dumps({'success': False, 'error': 'INTERNAL_ERROR'})
                  }

  # Results DynamoDB Table
  ResultsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'ai-chef-results'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

Outputs:
  ResultLambdaArn:
    Description: 'Result Lambda Function ARN'
    Value: !GetAtt ResultLambda.Arn
