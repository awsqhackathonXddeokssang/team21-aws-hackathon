AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Chef Session API - Lambda and API Gateway'

Resources:
  # Session Lambda Execution Role
  SessionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: 'arn:aws:dynamodb:*:*:table/ai-chef-sessions'
        - PolicyName: StepFunctionsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: 'arn:aws:states:*:*:stateMachine:ai-chef-workflow'

  # Session Lambda Function
  SessionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'ai-chef-session-api'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt SessionLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          SESSIONS_TABLE_NAME: 'ai-chef-sessions'
          STEP_FUNCTIONS_ARN: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:ai-chef-workflow'
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          import logging
          import uuid

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
          stepfunctions = boto3.client('stepfunctions', region_name='us-east-1')
          sessions_table = dynamodb.Table('ai-chef-sessions')

          def lambda_handler(event, context):
              try:
                  http_method = event['httpMethod']
                  
                  if http_method == 'POST' and event['resource'] == '/sessions':
                      return create_session(event, context)
                  elif http_method == 'GET' and event['resource'] == '/sessions':
                      return list_sessions(event, context)
                  elif http_method == 'POST' and '/session/' in event['resource']:
                      return process_session(event, context)
                  else:
                      return {
                          'statusCode': 404,
                          'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                          'body': json.dumps({'error': 'Not Found'})
                      }
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                      'body': json.dumps({'error': 'Internal Server Error'})
                  }

          def create_session(event, context):
              session_id = f"sess_{str(uuid.uuid4())}"
              created_at = datetime.now().isoformat()
              expires_at = datetime.fromtimestamp(datetime.now().timestamp() + 7200).isoformat()
              
              sessions_table.put_item(Item={
                  'sessionId': session_id,
                  'status': 'idle',
                  'createdAt': created_at,
                  'expiresAt': expires_at,
                  'TTL': int(datetime.now().timestamp() + 7200)
              })
              
              return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({
                      'sessionId': session_id,
                      'createdAt': created_at,
                      'expiresAt': expires_at
                  })
              }

          def list_sessions(event, context):
              return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({'sessions': []})
              }

          def process_session(event, context):
              session_id = event['pathParameters']['id']
              body = json.loads(event['body'])
              user_profile = body.get('userProfile')
              
              if not user_profile or 'target' not in user_profile:
                  return {
                      'statusCode': 400,
                      'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                      'body': json.dumps({'success': False, 'error': 'INVALID_PROFILE'})
                  }
              
              sessions_table.update_item(
                  Key={'sessionId': session_id},
                  UpdateExpression="SET #status = :status, #profile = :profile, #updatedAt = :updatedAt",
                  ExpressionAttributeNames={'#status': 'status', '#profile': 'profile', '#updatedAt': 'updatedAt'},
                  ExpressionAttributeValues={
                      ':status': 'processing',
                      ':profile': user_profile,
                      ':updatedAt': datetime.now().isoformat()
                  }
              )
              
              workflow_input = {
                  'sessionId': session_id,
                  'profile': {
                      'target': user_profile.get('target'),
                      'budget': int(user_profile.get('responses', {}).get('100', 20000)),
                      'servings': int(user_profile.get('responses', {}).get('101', 2))
                  }
              }
              
              response = stepfunctions.start_execution(
                  stateMachineArn='arn:aws:states:us-east-1:491085385364:stateMachine:ai-chef-workflow',
                  name=f'execution-{int(datetime.now().timestamp())}',
                  input=json.dumps(workflow_input)
              )
              
              return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({
                      'success': True,
                      'executionId': response['executionArn'],
                      'estimatedTime': 30,
                      'status': 'processing'
                  })
              }

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'ai-chef-api'
      Description: 'AI Chef Session Processing API'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Sessions Resource
  SessionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'sessions'

  # Session Resource
  SessionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'session'

  # Session ID Resource
  SessionIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref SessionResource
      PathPart: '{id}'

  # Process Resource
  ProcessResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref SessionIdResource
      PathPart: 'process'

  # Sessions GET Method (list sessions)
  SessionsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SessionsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  # Sessions POST Method (create session)
  SessionsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SessionsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  # Sessions OPTIONS Method for CORS
  SessionsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SessionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # POST Method
  ProcessMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProcessResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
        - StatusCode: 400
        - StatusCode: 500

  # OPTIONS Method for CORS
  ProcessOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProcessResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Lambda Permission for API Gateway - Sessions
  LambdaApiGatewaySessionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SessionLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/sessions'

  # Lambda Permission for API Gateway - Sessions POST
  LambdaApiGatewaySessionsPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SessionLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/sessions'

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SessionLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/session/*/process'

  # API Deployment
  ApiDeploymentProd:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SessionsGetMethod
      - SessionsPostMethod
      - SessionsOptionsMethod
      - ProcessMethod
      - ProcessOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'
      
  SessionLambdaArn:
    Description: 'Session Lambda Function ARN'
    Value: !GetAtt SessionLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SessionLambdaArn'
