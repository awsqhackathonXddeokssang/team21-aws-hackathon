AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Chef Step Functions - Fixed Workflow Sequence'

Parameters:
  Environment:
    Type: String
    Default: dev

Resources:
  # DynamoDB Tables
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'ai-chef-sessions-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ResultsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'ai-chef-results-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # Step Functions Execution Role
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt SessionsTable.Arn
                  - !GetAtt ResultsTable.Arn

  # Step Functions State Machine with Fixed Sequence
  RecipeWorkflowStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub 'ai-chef-workflow-fixed-${Environment}'
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "AI Chef Recipe Generation Workflow - Fixed Sequence",
          "StartAt": "ValidateInput",
          "States": {
            "ValidateInput": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "ai-chef-validator-PLACEHOLDER",
                "Payload.$": "$"
              },
              "ResultPath": "$.validation",
              "Next": "UpdateSessionStatus",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "HandleValidationError",
                  "ResultPath": "$.error"
                }
              ]
            },
            "UpdateSessionStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${SessionsTable}",
                "Item": {
                  "sessionId": {"S.$": "$.sessionId"},
                  "status": {"S": "processing"},
                  "phase": {"S": "recipe_generation"},
                  "progress": {"N": "10"},
                  "updatedAt": {"S.$": "$$.State.EnteredTime"}
                }
              },
              "ResultPath": null,
              "Next": "GenerateRecipe"
            },
            "GenerateRecipe": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "ai-chef-recipe-PLACEHOLDER",
                "Payload.$": "$"
              },
              "ResultSelector": {
                "recipe.$": "$.Payload.body"
              },
              "ResultPath": "$.recipeResult",
              "Retry": [
                {
                  "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "RecipeGenerationFailed",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "UpdatePricePhase"
            },
            "UpdatePricePhase": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${SessionsTable}",
                "Key": {
                  "sessionId": {"S.$": "$.sessionId"}
                },
                "UpdateExpression": "SET #phase = :phase, #progress = :progress, #updatedAt = :updatedAt",
                "ExpressionAttributeNames": {
                  "#phase": "phase",
                  "#progress": "progress",
                  "#updatedAt": "updatedAt"
                },
                "ExpressionAttributeValues": {
                  ":phase": {"S": "price_lookup"},
                  ":progress": {"N": "50"},
                  ":updatedAt": {"S.$": "$$.State.EnteredTime"}
                }
              },
              "ResultPath": null,
              "Next": "FetchPrices"
            },
            "FetchPrices": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "ai-chef-price-PLACEHOLDER",
                "Payload": {
                  "sessionId.$": "$.sessionId",
                  "profile.$": "$.profile",
                  "ingredients.$": "$.recipeResult.recipe.ingredients"
                }
              },
              "ResultSelector": {
                "pricing.$": "$.Payload.body"
              },
              "ResultPath": "$.pricingResult",
              "Retry": [
                {
                  "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "PriceFetchingFailed",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "CombineResults"
            },
            "CombineResults": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "ai-chef-combine-PLACEHOLDER",
                "Payload": {
                  "sessionId.$": "$.sessionId",
                  "profile.$": "$.profile",
                  "recipeResult.$": "$.recipeResult.recipe",
                  "pricingResult.$": "$.pricingResult.pricing"
                }
              },
              "ResultSelector": {
                "combinedResult.$": "$.Payload.body"
              },
              "ResultPath": "$.finalResult",
              "Next": "SaveFinalResults"
            },
            "SaveFinalResults": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${ResultsTable}",
                "Item": {
                  "sessionId": {"S.$": "$.sessionId"},
                  "createdAt": {"S.$": "$$.State.EnteredTime"},
                  "result": {"S.$": "States.JsonToString($.finalResult.combinedResult)"},
                  "ttl": {"N": "1735689600"}
                }
              },
              "ResultPath": null,
              "Next": "UpdateCompletionStatus"
            },
            "UpdateCompletionStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${SessionsTable}",
                "Key": {
                  "sessionId": {"S.$": "$.sessionId"}
                },
                "UpdateExpression": "SET #status = :status, #phase = :phase, #progress = :progress, #result = :result, #updatedAt = :updatedAt",
                "ExpressionAttributeNames": {
                  "#status": "status",
                  "#phase": "phase",
                  "#progress": "progress",
                  "#result": "result",
                  "#updatedAt": "updatedAt"
                },
                "ExpressionAttributeValues": {
                  ":status": {"S": "completed"},
                  ":phase": {"S": "finished"},
                  ":progress": {"N": "100"},
                  ":result": {"S.$": "States.JsonToString($.finalResult.combinedResult)"},
                  ":updatedAt": {"S.$": "$$.State.EnteredTime"}
                }
              },
              "ResultPath": null,
              "End": true
            },
            "RecipeGenerationFailed": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${SessionsTable}",
                "Key": {
                  "sessionId": {"S.$": "$.sessionId"}
                },
                "UpdateExpression": "SET #status = :status, #error = :error, #updatedAt = :updatedAt",
                "ExpressionAttributeNames": {
                  "#status": "status",
                  "#error": "error",
                  "#updatedAt": "updatedAt"
                },
                "ExpressionAttributeValues": {
                  ":status": {"S": "failed"},
                  ":error": {"S": "Recipe generation failed"},
                  ":updatedAt": {"S.$": "$$.State.EnteredTime"}
                }
              },
              "Next": "RecipeFailEnd"
            },
            "PriceFetchingFailed": {
              "Type": "Pass",
              "Result": {
                "pricing": {
                  "error": "Price fetching failed",
                  "fallback": true,
                  "ingredients": []
                }
              },
              "ResultPath": "$.pricingResult",
              "Next": "CombineResults"
            },
            "HandleValidationError": {
              "Type": "Fail",
              "Cause": "Input validation failed"
            },
            "RecipeFailEnd": {
              "Type": "Fail",
              "Cause": "Recipe generation failed"
            }
          }
        }

Outputs:
  StateMachineArn:
    Description: 'Fixed Step Functions State Machine ARN'
    Value: !Ref RecipeWorkflowStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-StateMachineArn'
  
  SessionsTableName:
    Description: 'Sessions DynamoDB Table Name'
    Value: !Ref SessionsTable
    Export:
      Name: !Sub '${AWS::StackName}-SessionsTable'
      
  ResultsTableName:
    Description: 'Results DynamoDB Table Name'
    Value: !Ref ResultsTable
    Export:
      Name: !Sub '${AWS::StackName}-ResultsTable'
