AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Chef API Gateway - Simple Version'

Resources:
  AiChefApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ai-chef-api
      Description: AI Chef API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: '*'

  # CORS 설정을 위한 OPTIONS 메서드들
  SessionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AiChefApi
      ParentId: !GetAtt AiChefApi.RootResourceId
      PathPart: sessions

  SessionsUpdateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AiChefApi
      ParentId: !Ref SessionsResource
      PathPart: update

  ResultsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AiChefApi
      ParentId: !GetAtt AiChefApi.RootResourceId
      PathPart: results

  ResultsSessionIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AiChefApi
      ParentId: !Ref ResultsResource
      PathPart: '{sessionId}'

  # POST /sessions
  SessionsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AiChefApi
      ResourceId: !Ref SessionsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ai-chef-session-create/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # POST /sessions/update
  SessionsUpdatePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AiChefApi
      ResourceId: !Ref SessionsUpdateResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ai-chef-session-update/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # GET /results/{sessionId}
  ResultsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AiChefApi
      ResourceId: !Ref ResultsSessionIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ai-chef-result/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # OPTIONS 메서드들 (CORS)
  SessionsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AiChefApi
      ResourceId: !Ref SessionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  SessionsUpdateOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AiChefApi
      ResourceId: !Ref SessionsUpdateResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ResultsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AiChefApi
      ResourceId: !Ref ResultsSessionIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions
  SessionCreatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: ai-chef-session-create
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${AiChefApi}/*/*'

  SessionUpdatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: ai-chef-session-update
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${AiChefApi}/*/*'

  ResultPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: ai-chef-result
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${AiChefApi}/*/*'

  # Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SessionsPostMethod
      - SessionsUpdatePostMethod
      - ResultsGetMethod
      - SessionsOptionsMethod
      - SessionsUpdateOptionsMethod
      - ResultsOptionsMethod
    Properties:
      RestApiId: !Ref AiChefApi
      StageName: prod

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${AiChefApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
